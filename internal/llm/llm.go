package llm

import (
	"fmt"
	"strings"

	"github.com/willis7/prtool/internal/model"
)

// LLM defines the interface for Language Model providers
type LLM interface {
	// Summarise takes a context string containing PR information and returns a summary
	Summarise(context string) (string, error)
}

// StubLLM is a test implementation that returns a fixed summary
type StubLLM struct {
	summary string
	err     error
}

// NewStubLLM creates a new stub LLM with a default summary
func NewStubLLM() *StubLLM {
	return &StubLLM{
		summary: "This is a summary generated by the stub LLM implementation. The development team has been making good progress with several important pull requests merged this period.",
	}
}

// NewStubLLMWithSummary creates a new stub LLM with a custom summary
func NewStubLLMWithSummary(summary string) *StubLLM {
	return &StubLLM{
		summary: summary,
	}
}

// NewStubLLMWithError creates a new stub LLM that returns an error
func NewStubLLMWithError(err error) *StubLLM {
	return &StubLLM{
		err: err,
	}
}

// Summarise implements the LLM interface for the stub
func (s *StubLLM) Summarise(context string) (string, error) {
	if s.err != nil {
		return "", s.err
	}
	return s.summary, nil
}

// BuildContext creates a context string from PR data suitable for LLM processing
func BuildContext(prs []*model.PR) string {
	if len(prs) == 0 {
		return "No pull requests found for the specified criteria."
	}

	var context string
	context += "Pull Request Summary:\n\n"

	for i, pr := range prs {
		context += fmt.Sprintf("%d. %s\n", i+1, pr.Title)
		context += fmt.Sprintf("   Author: %s\n", pr.Author)
		context += fmt.Sprintf("   Repository: %s\n", pr.Repository)

		if pr.MergedAt != nil {
			context += fmt.Sprintf("   Merged: %s\n", pr.MergedAt.Format("2006-01-02"))
		}

		if len(pr.Labels) > 0 {
			context += fmt.Sprintf("   Labels: %s\n", strings.Join(pr.Labels, ", "))
		}

		if pr.Body != "" {
			// Truncate body for context to avoid overly long prompts
			body := pr.Body
			if len(body) > 200 {
				body = body[:200] + "..."
			}
			context += fmt.Sprintf("   Description: %s\n", body)
		}

		context += "\n"
	}

	return context
}
